{"ast":null,"code":"var _jsxFileName = \"/home/falguni/Documents/rogue-game/src/components/Tetris.js\";\nimport React, { useState } from 'react';\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport { createStage, checkCollision } from '../gameHelpers';\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'; // custom hooks\n\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\n\nconst Tetris = () => {\n  // console.log(createStage())\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage] = useStage(player);\n  console.log('re-render');\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const startGame = () => {\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      if (player.pos.y < 1) {\n        console.log(\"GAME OVER!!!\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const dropPlayer = () => {\n    drop();\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  return /*#__PURE__*/React.createElement(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(StyledTetris, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Stage, {\n    stage: stage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"aside\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 3\n    }\n  }, gameOver ? /*#__PURE__*/React.createElement(Display, {\n    gameOver: gameOver,\n    text: \"Game Over\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 6\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Display, {\n    text: \"Score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(Display, {\n    text: \"Rows\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Display, {\n    text: \"Level\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(StartButton, {\n    callback: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default Tetris;","map":{"version":3,"sources":["/home/falguni/Documents/rogue-game/src/components/Tetris.js"],"names":["React","useState","Stage","Display","StartButton","createStage","checkCollision","StyledTetrisWrapper","StyledTetris","useInterval","usePlayer","useStage","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","console","log","movePlayer","dir","x","y","startGame","drop","collided","pos","dropPlayer","move","keyCode","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport Stage from './Stage';\n\nimport Display from './Display';\n\nimport StartButton from './StartButton';\n\n import { createStage, checkCollision } from '../gameHelpers';\n\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n\n// custom hooks\n\nimport { useInterval } from '../hooks/useInterval';\n\nimport { usePlayer } from '../hooks/usePlayer';\n\nimport { useStage } from '../hooks/useStage';\n\n\n\n\nconst Tetris = () => {\n\n\t// console.log(createStage())\n\n\tconst [dropTime, setDropTime] = useState(null);\n\n\tconst [gameOver, setGameOver] = useState(false);\n\n   const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n   const [stage, setStage] = useStage(player);\n\n  \n\n\tconsole.log('re-render');\n\n\n\tconst movePlayer = dir => {\n\n\t\tif (!checkCollision(player, stage, { x: dir, y: 0})) {\n\n\t\t\tupdatePlayerPos({ x: dir, y: 0 });\n\n\n\t\t}\n\n\t\t\n\n\n\n\t}\n\n\tconst startGame = () => {\n\n     setStage(createStage());\n\n     resetPlayer();\n\n     setGameOver(false);\n     \n\n\n\t}\n\n\n\tconst drop = () => {\n\n\t\tif (!checkCollision(player, stage, { x: 0, y: 1 })) {\n\n\t\t\t updatePlayerPos({ x: 0, y: 1, collided: false })\n\n\n\t\t} else {\n\n\t\t\tif (player.pos.y < 1) {\n\n\t\t\t\tconsole.log(\"GAME OVER!!!\");\n\n\t\t\t\tsetGameOver(true);\n\n\t\t\t\tsetDropTime(null);\n\n\n\n\t\t\t}\n\n\t\t\tupdatePlayerPos({ x: 0, y: 0, collided: true });\n\n\t\t}\n\n \n\n\t}\n\n\n\tconst dropPlayer = () => {\n\n\t\tdrop();\n\n\t\t\n\t}\n\n\tconst move = ({ keyCode }) => {\n\n     if(!gameOver) {\n\n     \tif(keyCode === 37) {\n\n     \t\tmovePlayer(-1);\n\n     \t} else if (keyCode === 39) {\n\n     \t\tmovePlayer(1);\n\n\n     \t} else if (keyCode === 40) {\n\n     \t\tdropPlayer();\n\n\n     \t}  else if (keyCode === 38) {\n\n     \t\tplayerRotate(stage, 1);\n\n     \t}\n     }\n\n\t\t\n\t}\n\n\tuseInterval(() => {\n\n\t\tdrop();\n\n\n\t}, dropTime)\n\n\n\treturn (\n\n\t\t<StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)}>\n\n\t\t<StyledTetris>\n\n\t\t<Stage stage={stage} />\n\n\t\t<aside>\n    \n    {gameOver ? (\n    \t<Display gameOver={gameOver} text=\"Game Over\" />\n\n    \t) : (\n\n\n\t\t <div>\n\n\t\t <Display text=\"Score\" />\n\n        <Display text=\"Rows\" />\n\n        <Display text=\"Level\" />\n\n        </div>\n\n        )}\n\n        <StartButton callback={startGame} />\n        \n\n\n\n\t\t </aside>\n\n\n\t\t</StyledTetris>\n\n\n\t\t</StyledTetrisWrapper>\n\n\t)\n}\n\nexport default Tetris;"]},"metadata":{},"sourceType":"module"}