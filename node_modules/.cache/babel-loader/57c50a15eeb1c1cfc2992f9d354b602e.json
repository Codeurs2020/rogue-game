{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n\n      ack.push(row);\n      return ack;\n    }, []);\n\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRow(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev)); // }, [player.collided, player.pos.x, player.pos.y, player.tetromino]);\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/home/falguni/Documents/rogue-game/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided","sweepRow"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAC/C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AAEA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AAIAC,EAAAA,SAAS,CAAC,MAAM;AAEdQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAEA,UAAMC,SAAS,GAAGC,QAAQ,IACxBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAE5B,UAAIA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAlC,MAAyC,CAAC,CAA9C,EAAiD;AAE/CP,QAAAA,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAd;AAEAJ,QAAAA,GAAG,CAACK,OAAJ,CAAY,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,EAAI,OAAJ,CAAnC,CAAZ;AAEA,eAAOR,GAAP;AAED;;AAEDA,MAAAA,GAAG,CAACS,IAAJ,CAASR,GAAT;AAEA,aAAOD,GAAP;AAED,KAhBD,EAgBG,EAhBH,CADF;;AAmBD,UAAMU,WAAW,GAAGC,SAAS,IAAI;AAEhC,YAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAV,CAAcX,GAAG,IACjCA,GAAG,CAACW,GAAJ,CAAQT,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADgB,CAAjB;AAOAZ,MAAAA,MAAM,CAACsB,SAAP,CAAiBC,OAAjB,CAAyB,CAACb,GAAD,EAAMc,CAAN,KAAY;AAEpCd,QAAAA,GAAG,CAACa,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACzB,cAAID,KAAK,KAAK,CAAd,EAAiB;AAEhBlB,YAAAA,QAAQ,CAACiB,CAAC,GAAGxB,MAAM,CAAC2B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAG1B,MAAM,CAAC2B,GAAP,CAAWD,CAA1C,IAA+C,CAC/CD,KAD+C,EAE9C,GAAEzB,MAAM,CAAC4B,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAFO,CAA/C;AAMA;AAED,SAXD;AAYA,OAdD;;AAgBE,UAAI5B,MAAM,CAAC4B,QAAX,EAAqB;AAEnB3B,QAAAA,WAAW;AAEX,eAAO4B,QAAQ,CAACtB,QAAD,CAAf;AAGD;;AAEH,aAAOA,QAAP;AAIA,KAtCD;;AAwCAJ,IAAAA,QAAQ,CAACU,IAAI,IAAIM,WAAW,CAACN,IAAD,CAApB,CAAR,CA/De,CAkEhB;AACG,GAnEM,EAmEJ,CAACb,MAAD,EAASC,WAAT,CAnEI,CAAT;AAuEA,SAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AAGD,CAjFM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n\n\n  useEffect(() => {\n\n    setRowsCleared(0);\n\n    const sweepRows = newStage => \n      newStage.reduce((ack, row) => {\n\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n\n          setRowsCleared(prev => prev + 1);\n\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n\n          return ack;\n\n        }\n\n        ack.push(row);\n\n        return ack;\n\n      }, [])\n\n  \tconst updateStage = prevStage => {\n\n  \t\tconst newStage = prevStage.map(row => \n  \t\t\trow.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n\n  \t\t\t);\n\n\n\n  \t\tplayer.tetromino.forEach((row, y) => {\n\n  \t\t\trow.forEach((value, x) => {\n  \t\t\t\tif (value !== 0) {\n\n  \t\t\t\t\tnewStage[y + player.pos.y][x + player.pos.x] = [\n  \t\t\t\t\tvalue,\n  \t\t\t\t\t`${player.collided ? 'merged' : 'clear'}`,\n\n\n  \t\t\t\t\t];\n  \t\t\t\t}\n\n  \t\t\t});\n  \t\t});\n\n      if (player.collided) {\n\n        resetPlayer();\n\n        return sweepRow(newStage);\n        \n\n      }\n\n  \t\treturn newStage;\n\n\n\n  \t};\n\n  \tsetStage(prev => updateStage(prev));\n\n  \n  // }, [player.collided, player.pos.x, player.pos.y, player.tetromino]);\n    }, [player, resetPlayer]);\n\n\n\n  return [stage, setStage];\n\n\n};\n\n\n"]},"metadata":{},"sourceType":"module"}