{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n  const linePoints = [40, 100, 300, 1200];\n  const calcScore = useCallback(() => {\n    if (rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n  return [score, setScore, rows, setRows, level, setLevel];\n};","map":{"version":3,"sources":["/home/falguni/Documents/rogue-game/src/hooks/useGameStatus.js"],"names":["useState","useEffect","useCallback","useGameStatus","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","prev"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAKA,OAAO,MAAMC,aAAa,GAAGC,WAAW,IAAI;AAE1C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,CAAD,CAAlC;AAEC,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AAEC,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;AAGF,QAAMW,UAAU,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAnB;AAEA,QAAMC,SAAS,GAAGV,WAAW,CAAC,MAAM;AAEnC,QAAIE,WAAW,GAAG,CAAlB,EAAqB;AAEpBE,MAAAA,QAAQ,CAACO,IAAI,IAAIA,IAAI,GAAGF,UAAU,CAACP,WAAW,GAAG,CAAf,CAAV,IAA+BK,KAAK,GAAG,CAAvC,CAAhB,CAAR;AAECD,MAAAA,OAAO,CAACK,IAAI,IAAIA,IAAI,GAAGT,WAAhB,CAAP;AAED;AAED,GAV4B,EAU1B,CAACK,KAAD,EAAQE,UAAR,EAAoBP,WAApB,CAV0B,CAA7B;AAYAH,EAAAA,SAAS,CAAC,MAAM;AAEdW,IAAAA,SAAS;AAEV,GAJQ,EAIN,CAACA,SAAD,EAAYR,WAAZ,EAAyBC,KAAzB,CAJM,CAAT;AAMA,SAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,CAAP;AAMD,CAnCM","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n\n\n\nexport const useGameStatus = rowsCleared => {\n\n  const [score, setScore] = useState(0);\n\n   const [rows, setRows] = useState(0);\n\n    const [level, setLevel] = useState(0);\n\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n\n  \tif (rowsCleared > 0) {\n\n  \t\tsetScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n\n     setRows(prev => prev + rowsCleared);\n\n  \t}\n\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    \n    calcScore();\n\n  }, [calcScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n\n\n\n\n\n};\n\n"]},"metadata":{},"sourceType":"module"}