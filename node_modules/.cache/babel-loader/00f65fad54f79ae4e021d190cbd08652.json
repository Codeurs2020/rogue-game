{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev)); // }, [player.collided, player.pos.x, player.pos.y, player.tetromino]);\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/home/falguni/Documents/rogue-game/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAC/C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AAEA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AAIAC,EAAAA,SAAS,CAAC,MAAM;AAEdQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAID,UAAMC,WAAW,GAAGC,SAAS,IAAI;AAEhC,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,GAAG,IACjCA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADgB,CAAjB;AAOAX,MAAAA,MAAM,CAACY,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AAEpCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACzB,cAAID,KAAK,KAAK,CAAd,EAAiB;AAEhBP,YAAAA,QAAQ,CAACM,CAAC,GAAGd,MAAM,CAACiB,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGhB,MAAM,CAACiB,GAAP,CAAWD,CAA1C,IAA+C,CAC/CD,KAD+C,EAE9C,GAAEf,MAAM,CAACkB,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAFO,CAA/C;AAMA;AAED,SAXD;AAYA,OAdD;;AAgBE,UAAIlB,MAAM,CAACkB,QAAX,EAAqB;AAEnBjB,QAAAA,WAAW;AAEZ;;AAEH,aAAOO,QAAP;AAIA,KAnCD;;AAqCAL,IAAAA,QAAQ,CAACgB,IAAI,IAAIb,WAAW,CAACa,IAAD,CAApB,CAAR,CA3Ce,CA8ChB;AACG,GA/CM,EA+CJ,CAACnB,MAAD,EAASC,WAAT,CA/CI,CAAT;AAmDA,SAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AAGD,CA7DM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n\n\n  useEffect(() => {\n\n    setRowsCleared(0);\n\n    \n\n  \tconst updateStage = prevStage => {\n\n  \t\tconst newStage = prevStage.map(row => \n  \t\t\trow.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n\n  \t\t\t);\n\n\n\n  \t\tplayer.tetromino.forEach((row, y) => {\n\n  \t\t\trow.forEach((value, x) => {\n  \t\t\t\tif (value !== 0) {\n\n  \t\t\t\t\tnewStage[y + player.pos.y][x + player.pos.x] = [\n  \t\t\t\t\tvalue,\n  \t\t\t\t\t`${player.collided ? 'merged' : 'clear'}`,\n\n\n  \t\t\t\t\t];\n  \t\t\t\t}\n\n  \t\t\t});\n  \t\t});\n\n      if (player.collided) {\n\n        resetPlayer();\n\n      }\n\n  \t\treturn newStage;\n\n\n\n  \t};\n\n  \tsetStage(prev => updateStage(prev));\n\n  \n  // }, [player.collided, player.pos.x, player.pos.y, player.tetromino]);\n    }, [player, resetPlayer]);\n\n\n\n  return [stage, setStage];\n\n\n};\n\n\n"]},"metadata":{},"sourceType":"module"}