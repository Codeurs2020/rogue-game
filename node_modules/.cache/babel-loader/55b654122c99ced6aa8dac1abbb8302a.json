{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  useEffect(() => {\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {});\n      });\n    };\n\n    setStage(prev => updateStage(prev));\n  }, []);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/home/falguni/Documents/rogue-game/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","prev"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAC/C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEf,UAAMO,WAAW,GAAGC,SAAS,IAAI;AAEhC,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,GAAG,IACjCA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADgB,CAAjB;AAOAT,MAAAA,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AAEpCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc,CAGzB,CAHD;AAIA,OAND;AASA,KAlBD;;AAoBAX,IAAAA,QAAQ,CAACY,IAAI,IAAIX,WAAW,CAACW,IAAD,CAApB,CAAR;AAGA,GAzBQ,EAyBN,EAzBM,CAAT;AA6BA,SAAO,CAACb,KAAD,EAAQC,QAAR,CAAP;AAGD,CAnCM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n\n  useEffect(() => {\n\n  \tconst updateStage = prevStage => {\n\n  \t\tconst newStage = prevStage.map(row => \n  \t\t\trow.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n\n\n\n  \t\t\t);\n\n  \t\tplayer.tetromino.forEach((row, y) => {\n\n  \t\t\trow.forEach((value, x) => {\n  \t\t\t\t\n\n  \t\t\t})\n  \t\t})\n\n\n  \t};\n\n  \tsetStage(prev => updateStage(prev))\n\n  \n  }, [])\n\n\n\n  return [stage, setStage];\n\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}